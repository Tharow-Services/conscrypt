{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c2ab19cc_7abc5851",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2021-05-10T08:41:06Z",
      "side": 1,
      "message": "rpl:  Is this safe to do on ART?  (Or in general)\n\nBackground: Each Conscrypt SSLSocket holds a reference to an object implementing the interface SslHandshakeCallbacks and calls into it at various points during the TLS handshake.  Prior to this change, JNI GetMethodID() is called on the concrete object before every callback. After this change, init code calls GetMethodID() on the interface and caches that, then the callback code uses this when calling methods of the concrete object.\n\nI\u0027m _fairly_ confident about this change as (a) we have tests which set different callbacks and they don\u0027t fail and (b) I wrote some JNI code (on the RI) which does the same thing and it works fine.\n",
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c66abdc_d7d88747",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1793992
      },
      "writtenOn": "2021-05-10T08:42:44Z",
      "side": 1,
      "message": "Sorry, I don\u0027t speak C++.",
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53f0c303_fffacf2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2021-05-12T14:43:19Z",
      "side": 1,
      "message": "I thought this was fine at first, but after reading https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html and https://developer.android.com/training/articles/perf-jni#local-and-global-references I think you need to promote those local method references to global ones using `NewGlobalRef`, if you intend to use them in a function/method other than the one that created them.\n\nAdding Vladimir to keep me honest.",
      "parentUuid": "c2ab19cc_7abc5851",
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76ece8bf_c3c0c80e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2021-05-12T15:44:01Z",
      "side": 1,
      "message": "Thanks, guys!",
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf9bf30_0c754f3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-12T16:56:27Z",
      "side": 1,
      "message": "This shall currently work on ART.\n\njmethodID and jfieldID are not `jobject`, so you cannot really create global references to them. And this CL correctly keeps the classes alive with global references. (See the \"Accessing Fields and Methods\" section in the first page you linked.)",
      "parentUuid": "53f0c303_fffacf2c",
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de1c927f_bca2d3d5",
        "filename": "common/src/jni/main/cpp/conscrypt/jniutil.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-12T15:37:01Z",
      "side": 1,
      "message": "Looking at `conscrypt/jniutil.h`, this is the same as `findClass()`. Why are there two different functions for the same thing? Maybe we should contribute a cleanup CL upstream?",
      "range": {
        "startLine": 90,
        "startChar": 33,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f7f65d2_4e4b0639",
        "filename": "common/src/jni/main/cpp/conscrypt/jniutil.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2021-05-12T15:44:01Z",
      "side": 1,
      "message": "We actually develop Conscrypt primarily upstream, so we can totally do that along with your other cleanup suggestion, and rpl\u0027s point about promoting to global refs.\n\nI\u0027ll get those done and send back out for review.",
      "parentUuid": "de1c927f_bca2d3d5",
      "range": {
        "startLine": 90,
        "startChar": 33,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738121ab_c51b45ba",
        "filename": "common/src/jni/main/cpp/conscrypt/jniutil.cc",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1018108
      },
      "writtenOn": "2021-05-12T15:37:01Z",
      "side": 1,
      "message": "Upstream: Why not add a helper `getStaticMethodRef()` to `conscrypt/jniutil.h`?",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 131,
        "endChar": 52
      },
      "revId": "aaf568e8b1c4dfbc20185061f8268c8f8e9da301",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}