{
  "comments": [
    {
      "key": {
        "uuid": "a792b8c2_365e704b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T12:45:02Z",
      "side": 1,
      "message": "Please be clearer / more specific, based on offline conversation it seemed you mean something like:\n\n\"Note that running\n\n  diff api/intra/{last,current}-api.txt  \n\nafter this CL shows several API elements that were removed, due to [...]. This is safe because [...]\".\n\nhowever I don\u0027t think it\u0027s true that that CL (moving nested classes out of OpenSSLCipher) explains all of the incompatible changes. For example, DefaultSSLContextImpl and its public ctor, OpenSSLCipherChaCha20, OpenSSLContextImpl, OpenSSLContextImpl.TLSv1 etc., OpenSSLECDHKeyAgreement, OpenSSLECKeyPairGenerator have all disappeared from the @IntraCoreApi and I don\u0027t think the above CL is responsible. How do we know that all of these removals are safe?\n\nPaul: Do you know why the removed API doesn\u0027t cause the check_api step of the build to fail? \n\n    check_api: {\n        current: {\n            api_file: \"api/intra/current-api.txt\",\n            removed_api_file: \"api/intra/current-removed.txt\",\n        },\n        last_released: {\n            api_file: \"api/intra/last-api.txt\",\n            removed_api_file: \"api/intra/last-removed.txt\",\n        },\n    },",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c36a312_33d3752e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2019-12-30T16:37:43Z",
      "side": 1,
      "message": "Why are they in the API if they are not used by code outside the API? Is it to ensure that the algorithms are not removed? If so then would that not be better handled by having tests to verify that the algorithms are still present.",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24a4128d_0853becb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-30T16:50:08Z",
      "side": 1,
      "message": "Good point.  Removing some of them still results in a successful build and a working device so I guess they got added due to build system limitations at the time we created them.",
      "parentUuid": "9c36a312_33d3752e",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f82e2e43_6df966d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-30T17:00:49Z",
      "side": 1,
      "message": "What do you propose as the action here (remove them from the IntraCoreApi, revert Conscrypt\u0027s pull/654, investigate whether the OEMs that took Conscrypt module in Q carry changes to e.g. libcore to depend on those APIs, ...)?",
      "parentUuid": "24a4128d_0853becb",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d579e4dc_3d353455",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-30T17:31:25Z",
      "side": 1,
      "message": "I was slightly mistaken. These methods are actually called by reflection from non-Conscrypt code, e.g. java.security.Provider[1] so technically they\u0027re part of the Intra-core API.\n\nHowever the names of the classes to be instantiated are provided by Conscrypt\u0027s own OpenSSLProvider class, so it\u0027s impossible for the provided names to be out of sync with the actual names of the classes (we have tests for that).\n\nSo I\u0027m not convinced that tracking these classes as part of the Intra-core API is the correct thing to do.\n\nThere\u0027s no vendor risk here either, nothing should be constructing these objects except the public JSA methods (e.g. Cipher.getInstance) and the names of the services haven\u0027t changed, just the names of the classes implementing them.\n\nWDYT?\n\n[1] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#1608",
      "parentUuid": "f82e2e43_6df966d9",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "147b3082_56d722c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-30T18:34:16Z",
      "side": 1,
      "message": "I don\u0027t follow, where is the name of the class to be instantiated coming from at runtime?\n\nThe code you linked to in [1] doesn\u0027t have any hard coded class names or similar. Are the class names also returned by logic in Conscrypt Module? If so, which API returns them?",
      "parentUuid": "d579e4dc_3d353455",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "476ccbf4_03dc8cd4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-31T10:56:33Z",
      "side": 1,
      "message": "All security providers extend java.security.Provider[1][2].  This base class implements the map from security service name to corresponding implementation class but does not populate it, along with the logic for creating instances of provider classes by reflection.\n\nOpenSSLProvider[3] is Conscrypt\u0027s implementation of Provider.  It populates the map from its constructor[4] using methods from the base class[5].  This is the expected pattern for all providers.  There is no other API to return these class names.  All of the public APIs which return a security service object, e.g. Cipher.getInstance[6] ultimately end up in Provider.newInstance[7].  There is no other API to obtain an instance of these classes and no safe way for application code to reflect for them.\n\nThus: The mapping from security service name to its implementing class are entirely static and local to the provider itself and so I would say do not form part of the intra-core API as they will always be self-consistent.  We could change the class names at will between module versions and it will not break any public APIs.\n\nWhat *is* important is that the security service names which are documented as being available e.g.[8] *are* available, and of course we have tests for that outside of Conscrypt[9][10]\n\n[1] https://developer.android.com/reference/java/security/Provider\n[2] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#93\n[3] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/common/src/main/java/org/conscrypt/OpenSSLProvider.java#34\n[4] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/common/src/main/java/org/conscrypt/OpenSSLProvider.java#54\n[5] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#327\n[6] https://developer.android.com/reference/javax/crypto/Cipher#getInstance(java.lang.String)\n[7] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#1608\n[8] https://developer.android.com/reference/javax/crypto/Cipher (skip down to \"Android provides the following Cipher transformations\")\n[9] https://android.googlesource.com/platform/libcore/+/refs/heads/master/luni/src/test/java/libcore/java/security/ProviderTest.java#79\n[10] https://android.googlesource.com/platform/libcore/+/refs/heads/master/luni/src/test/java/libcore/javax/crypto/CipherTest.java",
      "parentUuid": "147b3082_56d722c0",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ed5d83_6b93c3fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T12:45:02Z",
      "side": 1,
      "message": "Thanks! Okay, sounds reasonable to rename Cipher implementation classes. App code that relies on old names would break on R devices anyway, plus it\u0027s not reasonable for an app to rely on an Cipher implementation class name. Also, while the class name isn\u0027t stable, the cipher name is stable, but even for those apps do in general need to deal with ciphers appearing and going away.\n\nSo, it seems reasonable to remove the Cipher implementation class names from the intra-core API.\n\nI\u0027ve also personally confirmed that there are no app string literals containing these class names.",
      "parentUuid": "476ccbf4_03dc8cd4",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}