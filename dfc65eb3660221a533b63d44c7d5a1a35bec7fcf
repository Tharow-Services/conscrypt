{
  "comments": [
    {
      "key": {
        "uuid": "a792b8c2_365e704b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T12:45:02Z",
      "side": 1,
      "message": "Please be clearer / more specific, based on offline conversation it seemed you mean something like:\n\n\"Note that running\n\n  diff api/intra/{last,current}-api.txt  \n\nafter this CL shows several API elements that were removed, due to [...]. This is safe because [...]\".\n\nhowever I don\u0027t think it\u0027s true that that CL (moving nested classes out of OpenSSLCipher) explains all of the incompatible changes. For example, DefaultSSLContextImpl and its public ctor, OpenSSLCipherChaCha20, OpenSSLContextImpl, OpenSSLContextImpl.TLSv1 etc., OpenSSLECDHKeyAgreement, OpenSSLECKeyPairGenerator have all disappeared from the @IntraCoreApi and I don\u0027t think the above CL is responsible. How do we know that all of these removals are safe?\n\nPaul: Do you know why the removed API doesn\u0027t cause the check_api step of the build to fail? \n\n    check_api: {\n        current: {\n            api_file: \"api/intra/current-api.txt\",\n            removed_api_file: \"api/intra/current-removed.txt\",\n        },\n        last_released: {\n            api_file: \"api/intra/last-api.txt\",\n            removed_api_file: \"api/intra/last-removed.txt\",\n        },\n    },",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90be9c84_218fe407",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-31T13:14:39Z",
      "side": 1,
      "message": "OpenSSLCipherChaCha20, OpenSSLContextImpl etc were all *added* to the API since qt-release, i.e. they\u0027re in current-api.txt and not last-api.txt.  Most if not all of them probably shouldn\u0027t be in the intra-core API, but I didn\u0027t think that was part of this CL.\n\nAside from the Cipher implementation refactoring, the only removal is the public constructor for DefaultSSLContextImpl.  It\u0027s not used outside Conscrypt so again, I\u0027m not sure why it\u0027s listed in the API.  The public API is SSLContext.getInstance().",
      "parentUuid": "a792b8c2_365e704b",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e891628c_a4da9587",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T13:23:40Z",
      "side": 1,
      "message": "\u003e OpenSSLCipherChaCha20, OpenSSLContextImpl etc were all *added*\n\u003e to the API since qt-release, i.e. they\u0027re in current-api.txt and \n\u003e not last-api.txt. \n\nI don\u0027t think this is correct? This CL here is adding them to last-api.txt\n\n\u003e Aside from the Cipher implementation refactoring, the only removal is the public constructor for DefaultSSLContextImpl.  It\u0027s not used outside Conscrypt so again, I\u0027m not sure why it\u0027s listed in the API.  The public API is SSLContext.getInstance().\n\nThe reason why additional stuff is listed in the @IntraCoreApi is given in https://r.android.com/789990 although I\u0027m not sure if the reason is valid. It seems to say that @IntraCoreApi is needed because libcore code accesses these identifier via reflection, but I\u0027m not sure if that\u0027s a sufficient reason if libcore doesn\u0027t hard code those identifers and only gets them at runtime from invoking Conscrypt APIs.",
      "parentUuid": "90be9c84_218fe407",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3de7769e_141db17c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-31T13:41:23Z",
      "side": 1,
      "message": "Ugh, Meld\u0027s search function caught me out, I thought it searched both files.  Anyway, I still don\u0027t see any removals there:-\n$ for i in OpenSSLCipherChaCha20 OpenSSLContextImpl OpenSSLECDHKeyAgreement OpenSSLECKeyPairGenerator; do grep \"ctor.*$i\" *; done\ncurrent-api.txt:    ctor public OpenSSLCipherChaCha20();\nlast-api.txt:    ctor public OpenSSLCipherChaCha20();\ncurrent-api.txt:    ctor public OpenSSLContextImpl.TLSv1();\ncurrent-api.txt:    ctor public OpenSSLContextImpl.TLSv11();\ncurrent-api.txt:    ctor public OpenSSLContextImpl.TLSv12();\ncurrent-api.txt:    ctor public OpenSSLContextImpl.TLSv13();\nlast-api.txt:    ctor public OpenSSLContextImpl.TLSv1();\nlast-api.txt:    ctor public OpenSSLContextImpl.TLSv11();\nlast-api.txt:    ctor @dalvik.annotation.compat.UnsupportedAppUsage public OpenSSLContextImpl.TLSv12();\nlast-api.txt:    ctor public OpenSSLContextImpl.TLSv13();\ncurrent-api.txt:    ctor public OpenSSLECDHKeyAgreement();\nlast-api.txt:    ctor public OpenSSLECDHKeyAgreement();\ncurrent-api.txt:    ctor public OpenSSLECKeyPairGenerator();\nlast-api.txt:    ctor public OpenSSLECKeyPairGenerator();\n\n(I\u0027ll remove that UnsupportedAppUsage annotation, it doesn\u0027t belong in here)\n\nI did look at https://r.android.com/789990 earlier but no longer agree with the reasoning for the reasons we discussed.",
      "parentUuid": "e891628c_a4da9587",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5a1f592_b84beb28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T14:16:19Z",
      "side": 1,
      "message": "\u003e Ugh, Meld\u0027s search function caught me out, I thought it searched both files.  Anyway, I still don\u0027t see any removals there:-\n\u003e $ for i in OpenSSLCipherChaCha20 OpenSSLContextImpl OpenSSLECDHKeyAgreement OpenSSLECKeyPairGenerator; do grep \"ctor.*$i\" *; done\n\u003e current-api.txt:    ctor public OpenSSLCipherChaCha20();\n\u003e last-api.txt:    ctor public OpenSSLCipherChaCha20();\n\nAh, I see. It\u0027s in both files but not in the same place (because of the removals/additions) so diff showed it as both an addition and a removal. Okay, that particular one is fine.\n\nIt does look through like the following ctorwas present in last-api.txt but is missing from current-api.txt:\n\nctor public DefaultSSLContextImpl() throws java.security.GeneralSecurityException, java.io.IOException;\n\nI guess it \"should\" be safe?\n\n(Also, ctor public OpenSSLContextImpl.TLSv12() has lost its @dalvik.annotation.compat.UnsupportedAppUsage annotation, and class DefaultSSLContextImpl lost its \"final\" modifier).\n\n\n\u003e I did look at https://r.android.com/789990 earlier but no longer \n\u003e agree with the reasoning for the reasons we discussed.\n\nI agree that it\u0027s probably safe in this instance, but going forward it still seems that either we need to somehow prove that all identifier names used for this reflective access come from Conscrypt Module without being hard-coded or persisted, or add those identifiers back to the @CorePlatformApi and keep them stable.\n\nPerhaps, as part of a follow-up CL, the API in Conscrypt that takes those Strings and performs reflection should assert that the Strings are \u003d\u003d (identical) to String objects held in Conscrypt\u0027s Provider? This in turn would require Conscrypt to construct String objects that are !\u003d the corresponding intern()\u0027ed version and to keep those objects on the heap for the lifetime of the process in order for the caller to prove that it got the String instance from a Conscrypt API during the runtime of the current process (as opposed to hard coding it or loading it from persistent storage)? WDYT?",
      "parentUuid": "3de7769e_141db17c",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d823a0f_2029a146",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2020-01-06T12:39:16Z",
      "side": 1,
      "message": "\u003e\u003e OpenSSLContextImpl.TLSv12() has lost its @dalvik.annotation.compat.UnsupportedAppUsage\n\nThat was my bad, I thought it wasn\u0027t supposed to be there, I\u0027ll put it back and investigate why it isn\u0027t in the current-api file.\n\nThe DefaultSSLContextImpl change is also fine, again it\u0027s not referenced outside the Conscrypt module.",
      "parentUuid": "b5a1f592_b84beb28",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acc11088_0dfc9945",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2020-01-07T12:29:37Z",
      "side": 1,
      "message": "Sorry, I think it\u0027s actually my bad and I was mistaken: It doesn\u0027t look like the annotation is currently in current.txt so we should probably drop it from last-api.txt again?\n\nhttps://android.googlesource.com/platform/external/conscrypt/+/master/api/intra/current.txt#177",
      "parentUuid": "9d823a0f_2029a146",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9efac3bb_7c2c5fbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2020-01-07T12:45:04Z",
      "side": 1,
      "message": "No, I believe it should be in current.txt[1][2], but let\u0027s address that separately.\n\n[1] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/srcgen/unsupported-app-usage.json#236\n[2] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/repackaged/common/src/main/java/com/android/org/conscrypt/OpenSSLContextImpl.java#187",
      "parentUuid": "acc11088_0dfc9945",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ad560fb_18f08d14",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2020-01-07T16:04:51Z",
      "side": 1,
      "message": "The UnsupportedAppUsage annotation should not be in the current.txt file for a couple of reasons.\n\n1) Generally Metalava only adds annotations to the .txt file if those annotations are defined in that .txt file as d.a.c.UAU is defined in libcore it is not part of conscrypt\u0027s .txt file and so should not be used in there. There is an argument that metalava\u0027s behavior is wrong but that is a separate issue.\n\n2) The d.a.c.UnsupportedAppUsage annotation is not being used anymore, or is in the process of being replaced so having them in the .txt file would just cause future churn.",
      "parentUuid": "9efac3bb_7c2c5fbe",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "384ee811_659fea49",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2020-01-07T16:07:59Z",
      "side": 1,
      "message": "So I should remove them from last-api.txt too?",
      "parentUuid": "6ad560fb_18f08d14",
      "range": {
        "startLine": 13,
        "startChar": 20,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c36a312_33d3752e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2019-12-30T16:37:43Z",
      "side": 1,
      "message": "Why are they in the API if they are not used by code outside the API? Is it to ensure that the algorithms are not removed? If so then would that not be better handled by having tests to verify that the algorithms are still present.",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24a4128d_0853becb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-30T16:50:08Z",
      "side": 1,
      "message": "Good point.  Removing some of them still results in a successful build and a working device so I guess they got added due to build system limitations at the time we created them.",
      "parentUuid": "9c36a312_33d3752e",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f82e2e43_6df966d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-30T17:00:49Z",
      "side": 1,
      "message": "What do you propose as the action here (remove them from the IntraCoreApi, revert Conscrypt\u0027s pull/654, investigate whether the OEMs that took Conscrypt module in Q carry changes to e.g. libcore to depend on those APIs, ...)?",
      "parentUuid": "24a4128d_0853becb",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d579e4dc_3d353455",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-30T17:31:25Z",
      "side": 1,
      "message": "I was slightly mistaken. These methods are actually called by reflection from non-Conscrypt code, e.g. java.security.Provider[1] so technically they\u0027re part of the Intra-core API.\n\nHowever the names of the classes to be instantiated are provided by Conscrypt\u0027s own OpenSSLProvider class, so it\u0027s impossible for the provided names to be out of sync with the actual names of the classes (we have tests for that).\n\nSo I\u0027m not convinced that tracking these classes as part of the Intra-core API is the correct thing to do.\n\nThere\u0027s no vendor risk here either, nothing should be constructing these objects except the public JSA methods (e.g. Cipher.getInstance) and the names of the services haven\u0027t changed, just the names of the classes implementing them.\n\nWDYT?\n\n[1] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#1608",
      "parentUuid": "f82e2e43_6df966d9",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "147b3082_56d722c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-30T18:34:16Z",
      "side": 1,
      "message": "I don\u0027t follow, where is the name of the class to be instantiated coming from at runtime?\n\nThe code you linked to in [1] doesn\u0027t have any hard coded class names or similar. Are the class names also returned by logic in Conscrypt Module? If so, which API returns them?",
      "parentUuid": "d579e4dc_3d353455",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "476ccbf4_03dc8cd4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2019-12-31T10:56:33Z",
      "side": 1,
      "message": "All security providers extend java.security.Provider[1][2].  This base class implements the map from security service name to corresponding implementation class but does not populate it, along with the logic for creating instances of provider classes by reflection.\n\nOpenSSLProvider[3] is Conscrypt\u0027s implementation of Provider.  It populates the map from its constructor[4] using methods from the base class[5].  This is the expected pattern for all providers.  There is no other API to return these class names.  All of the public APIs which return a security service object, e.g. Cipher.getInstance[6] ultimately end up in Provider.newInstance[7].  There is no other API to obtain an instance of these classes and no safe way for application code to reflect for them.\n\nThus: The mapping from security service name to its implementing class are entirely static and local to the provider itself and so I would say do not form part of the intra-core API as they will always be self-consistent.  We could change the class names at will between module versions and it will not break any public APIs.\n\nWhat *is* important is that the security service names which are documented as being available e.g.[8] *are* available, and of course we have tests for that outside of Conscrypt[9][10]\n\n[1] https://developer.android.com/reference/java/security/Provider\n[2] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#93\n[3] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/common/src/main/java/org/conscrypt/OpenSSLProvider.java#34\n[4] https://android.googlesource.com/platform/external/conscrypt/+/refs/heads/master/common/src/main/java/org/conscrypt/OpenSSLProvider.java#54\n[5] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#327\n[6] https://developer.android.com/reference/javax/crypto/Cipher#getInstance(java.lang.String)\n[7] https://android.googlesource.com/platform/libcore/+/refs/heads/master/ojluni/src/main/java/java/security/Provider.java#1608\n[8] https://developer.android.com/reference/javax/crypto/Cipher (skip down to \"Android provides the following Cipher transformations\")\n[9] https://android.googlesource.com/platform/libcore/+/refs/heads/master/luni/src/test/java/libcore/java/security/ProviderTest.java#79\n[10] https://android.googlesource.com/platform/libcore/+/refs/heads/master/luni/src/test/java/libcore/javax/crypto/CipherTest.java",
      "parentUuid": "147b3082_56d722c0",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ed5d83_6b93c3fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2019-12-31T12:45:02Z",
      "side": 1,
      "message": "Thanks! Okay, sounds reasonable to rename Cipher implementation classes. App code that relies on old names would break on R devices anyway, plus it\u0027s not reasonable for an app to rely on an Cipher implementation class name. Also, while the class name isn\u0027t stable, the cipher name is stable, but even for those apps do in general need to deal with ciphers appearing and going away.\n\nSo, it seems reasonable to remove the Cipher implementation class names from the intra-core API.\n\nI\u0027ve also personally confirmed that there are no app string literals containing these class names.",
      "parentUuid": "476ccbf4_03dc8cd4",
      "revId": "dfc65eb3660221a533b63d44c7d5a1a35bec7fcf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}