/* GENERATED SOURCE. DO NOT MODIFY. */
/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.org.conscrypt.metrics;

import com.android.org.conscrypt.Internal;
import java.util.HashMap;

/**
 * Reimplement with reflection calls the logging class,
 * generated by frameworks/statsd.
 * <p>
 * In case atom is changed, generate new wrapper with stats-log-api-gen
 * tool as shown below and add corresponding methods to ReflexiveStatsEvent's
 * newEvent() method.
 * <p>
 * $ stats-log-api-gen \
 *   --java "common/src/main/java/org/conscrypt/metrics/ConscryptStatsLog.java" \
 *   --module conscrypt \
 *   --javaPackage org.conscrypt.metrics \
 *   --javaClass ConscryptStatsLog
 * @hide This class is not part of the Android public SDK API
 **/
@Internal
public final class ConscryptStatsLog {
    public static final int TLS_HANDSHAKE_REPORTED = 317;
    public static final int CONSCRYPT_CIPHER_USED = 500;

    private Hashmap <MetricsCipher, Integer> cipherMap = new HashMap<>();
    private int counter = 0;

    private ConscryptStatsLog() {}

    public static void write(int atomId, boolean success, int protocol, int cipherSuite,
            int duration, Source source, int[] uids) {
        ReflexiveStatsEvent event = ReflexiveStatsEvent.buildEvent(
                atomId, success, protocol, cipherSuite, duration, source.ordinal(), uids);

        ReflexiveStatsLog.write(event);
    }

    public static void write(int atomId, int cipherId, int uses) {
        counter++;
        if (cipherMap.containsKey(cipherId)) {
            cipherMap.put(cipherId, cipherMap.get(cipherId) + 1);
        } else {
            cipherMap.put(cipherId, 1);
        }
        if (counter % 20 == 0) {
            writeCipherMap();
            counter = 0;
        }
    }

    private static void writeCipherMap() {
        for (MetricsCipher cipher : cipherMap.keySet()) {
            write(CONSCRYPT_CIPHER_USED, cipher.getId(), cipherMap.get(cipher));
        }
    }
}
