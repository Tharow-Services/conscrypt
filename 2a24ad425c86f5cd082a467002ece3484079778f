{
  "comments": [
    {
      "key": {
        "uuid": "442a5a15_b766e25d",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2015-09-10T04:49:11Z",
      "side": 1,
      "message": "This looks off. I think you can just delete this condition altogether and only query len. SSL_write isn\u0027t going to report that bytes were written until they\u0027re completely written to the transport.",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64cf5e9f_cd0be463",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1081233
      },
      "writtenOn": "2015-09-10T19:15:38Z",
      "side": 1,
      "message": "@kroot you want me to do that in this commit?",
      "parentUuid": "442a5a15_b766e25d",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84753240_5146968b",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2015-09-10T19:25:04Z",
      "side": 1,
      "message": "Looks like this dates to this CL:\nhttps://android.googlesource.com/platform/libcore/+/51cf1b49bca54ec0229a51df400ad1bee580b1bb%5E%21/\n\nIt may be worth reexamining b/8272932 because I do not believe the claim about SSL_write is accurate, in either BoringSSL or OpenSSL.\n\nIn OpenSSL, SSL_write, after following a bunch of other code, returns whatever ssl3_write_pending returns. ssl3_write_pending calls BIO_write in a loop to flush the buffer. It will never return the number of plaintext bytes written (wpend_ret) until the entirely of wbuf is flushed, at which point it sets wbuf.left to 0.\n\nhttps://git.openssl.org/gitweb/?p\u003dopenssl.git;a\u003dblob;f\u003dssl/s3_pkt.c;h\u003d25cf929a55d6decf3d815f28ab5e3ffd8d089b11;hb\u003drefs/heads/OpenSSL_1_0_1-stable#l910\n\n(If it behaved otherwise, the blocking mode of SSL_write would never work. Blocking code is not supposed to have to retry.)",
      "parentUuid": "64cf5e9f_cd0be463",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ef2afe_a8c853af",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1002975
      },
      "writtenOn": "2015-09-10T21:28:53Z",
      "side": 1,
      "message": "running the test libcore.javax.net.ssl.SSLSocketTest#test_SSLSocket_setSoWriteTimeout seems to leave things in the buffer. We do use this in non-blocking mode. Here\u0027s a snippet of the JNI_DEBUG when running this test:\n\n    I(35030) ssl\u003d0xf03e5db8 NativeCrypto_SSL_write fd\u003d0xf07fea50 shc\u003d0xf07fea54 b\u003d0xf07fea58 offset\u003d0 len\u003d4609 write_timeout_millis\u003d1  (NativeCrypto-jni)\n    I(35030) ssl\u003d0xf03e5db8 sslWrite buf\u003d0xf05f0918 len\u003d4609 write_timeout_millis\u003d1  (NativeCrypto-jni)\n    I(35030) ssl\u003d0xf03e5db8 sslWrite appData\u003d0xf05cbc68  (NativeCrypto-jni)\n    I(35030) ssl\u003d0xf03e5db8 sslWrite SSL_write len\u003d4609 left\u003d0  (NativeCrypto-jni)\n    I(35030) ssl\u003d0xf03e5db8 sslWrite SSL_write result\u003d-1 sslError\u003d3 left\u003d3486  (NativeCrypto-jni)\n    I(35030) sslSelect type\u003dWRITE fd\u003d17 appData\u003d0xf05cbc68 timeout_millis\u003d1  (NativeCrypto-jni)\n    I(35030) sslSelect WRITE fd\u003d17 appData\u003d0xf05cbc68 timeout_millis\u003d1 \u003d\u003e 0  (NativeCrypto-jni)\n    I(35030) throwSocketTimeoutException Write timed out  (NativeCrypto-jni)",
      "parentUuid": "84753240_5146968b",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "447fba21_2f660534",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2015-09-10T22:45:28Z",
      "side": 1,
      "message": "Even in non-blocking mode, SSL_write will not signal until everything has been written to the BIO. It may return -1 and signal SSL_ERROR_WANT_WRITE if it\u0027s not able to write it in one step. The caller is then supposed to retry.\n\nWhat is that a snippet of? The test on its own or the test with the wbuf.left check removed or...?\n\nThough I actually don\u0027t see how the left check could even affect this codepath.\n\nIt seems the SSL_write is failing with:\n  I(35030) ssl\u003d0xf03e5db8 sslWrite SSL_write result\u003d-1 sslError\u003d3 left\u003d3486  (NativeCrypto-jni)\n\n3 is SSL_ERROR_WANT_WRITE, which means that we tried to write the record to the buffer but hit an error (possibly EWOULDBLOCK) before managing to write it all.\n\nThe caller is supposed to retry when the socket is writable again, or possibly give up if the socket had simply failed. (OpenSSL doesn\u0027t do a very good job of distinguishing the two and largely relies on the caller to do so.)\n\nresult was -1, so len should be unchanged, which means len \u003e 0 is still true. That would suggest that checking left doesn\u0027t do anything here, right? Or am I missing something?",
      "parentUuid": "c4ef2afe_a8c853af",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "040942dd_da7ec5a9",
        "filename": "src/main/native/org_conscrypt_NativeCrypto.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9940,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2015-09-11T15:50:13Z",
      "side": 1,
      "message": "Er, to clarify since I realized I\u0027m being kinda unclear:\n\nThe API contract of SSL_write is that it either returns a number of bytes written or \u003c\u003d 0 on error. If the latter, SSL_get_error gives you more information, possibly SSL_ERROR_WANT_WRITE.\n\nIf it signaled SSL_ERROR_WANT_WRITE and the underlying transport\u0027s error was a retryable one, like EWOULDBLOCK, the caller should retry the SSL_write call, as in POSIX[*].\n\nInternally, SSL_write may well have put some data in wbuf and then hit EWOULDBLOCK on the transport, leaving us in the situation described. However, it will not return a number of bytes written until wbuf is completely written to the transport. wbuf is an implementation detail and the caller should only retry based on SSL_write\u0027s return value (and what SSL_get_error signals).\n\nFrom the caller\u0027s perspective, SSL_write returned -1, so \"no\" bytes were written and we may retry later. On a retry, SSL_write will internally flush whatever\u0027s in wbuf and report that however much plaintext was in that record was returned, so the caller can then update len or whatever bookkeeping.\n\n\n[*] Unlike POSIX, because you may be halfway through writing a record, you cannot retry with different data. This is why there\u0027s all this mess around SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER. But the behavior is the same either way, it just removes the pointer check.",
      "parentUuid": "447fba21_2f660534",
      "range": {
        "startLine": 9940,
        "startChar": 49,
        "endLine": 9940,
        "endChar": 77
      },
      "revId": "2a24ad425c86f5cd082a467002ece3484079778f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}