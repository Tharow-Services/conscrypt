{
  "comments": [
    {
      "key": {
        "uuid": "1a3824c2_668518f0",
        "filename": "Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 221,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-08-24T14:06:24Z",
      "side": 1,
      "message": "You cannot do that - conscrypt should not depend on framework code to be built. Doesn\u0027t statsd offer stubs to link against?",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 221,
        "endChar": 20
      },
      "revId": "422f8e1e424b8a4fb52e2f147a3b5b9121f6d457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb5a66ec_ec4b340f",
        "filename": "platform/src/main/java/org/conscrypt/Platform.java",
        "patchSetId": 8
      },
      "lineNbr": 561,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2020-08-27T11:30:41Z",
      "side": 1,
      "message": "To re-iterate Nicolas\u0027 and Daulet\u0027s comments (and I think we discussed this offline), (1) we can\u0027t link directly to framework code from a core library (2) we should do this in a type-safe manner and (3) it looks to me like StatsLog.write() expects a StatsEvent object and not a varargs list.\n\nI\u0027m guessing this may be the first core libs usage of StatsLog - others are either in the framework or in native code in non-app processes.\n\nWe could probably reflect for StatsLog.write() but it looks to me that generating a StatsEvent is unavoidable as it encapsulates the statsd socket protocol[1].  Reflecting for the needed StatsEvent methods is possible but we\u0027d need a several from StatsEvent.Builder (at least: Constructor, writeInt(), writeLong() and build()).  It\u0027s doable but kind of ugly.  If stubs are available, that would be better although I\u0027m unsure if core libs can even link against framework stubs (Nicolas?).\n\nIf neither of those approaches is feasible, we might have to write a JNI method to do the writing which statically links whatever C library other native code uses (the DNS resolver module is probably a good example to look at).",
      "range": {
        "startLine": 561,
        "startChar": 17,
        "endLine": 561,
        "endChar": 22
      },
      "revId": "422f8e1e424b8a4fb52e2f147a3b5b9121f6d457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7300d596_3220cfea",
        "filename": "platform/src/main/java/org/conscrypt/Platform.java",
        "patchSetId": 8
      },
      "lineNbr": 566,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2020-08-27T11:30:41Z",
      "side": 1,
      "message": "An enum would be a better choice here if we need to do this (and I guess we can\u0027t use the atom proto directly without linking protocol buffer code into Conscrypt which might be expensive).\n\nNote that this is shared between the android and platform builds, so should probably live in a new shared class under common/",
      "range": {
        "startLine": 566,
        "startChar": 23,
        "endLine": 566,
        "endChar": 41
      },
      "revId": "422f8e1e424b8a4fb52e2f147a3b5b9121f6d457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48c912a4_0e440ae0",
        "filename": "repackaged/platform/src/main/java/com/android/org/conscrypt/Platform.java",
        "patchSetId": 8
      },
      "lineNbr": 588,
      "author": {
        "id": 1604402
      },
      "writtenOn": "2020-08-21T16:53:47Z",
      "side": 1,
      "message": "ideally you\u0027d use strongly-typed generated fields and then cast them to int",
      "range": {
        "startLine": 587,
        "startChar": 12,
        "endLine": 588,
        "endChar": 25
      },
      "revId": "422f8e1e424b8a4fb52e2f147a3b5b9121f6d457",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}