// Signature format: 2.0
package android.net.ssl {

  public class SSLEngines {
    method @Nullable public static byte[] exportKeyingMaterial(@NonNull javax.net.ssl.SSLEngine, @NonNull String, @Nullable byte[], int) throws javax.net.ssl.SSLException;
    method public static boolean isSupportedEngine(@NonNull javax.net.ssl.SSLEngine);
    method public static void setUseSessionTickets(@NonNull javax.net.ssl.SSLEngine, boolean);
  }

  public class SSLSockets {
    method @Nullable public static byte[] exportKeyingMaterial(@NonNull javax.net.ssl.SSLSocket, @NonNull String, @Nullable byte[], int) throws javax.net.ssl.SSLException;
    method public static boolean isSupportedSocket(@NonNull javax.net.ssl.SSLSocket);
    method public static void setUseSessionTickets(@NonNull javax.net.ssl.SSLSocket, boolean);
  }

}

package android.security.crypto {

  public class Hpke {
    ctor public Hpke(android.security.crypto.HpkeSuite);
    method public android.security.crypto.HpkeResult export(int, @Nullable byte[]);
    method public byte[] open(@NonNull byte[], @Nullable byte[]);
    method public android.security.crypto.HpkeResult seal(@NonNull byte[], @Nullable byte[]);
    method public void setupBaseRecipient(@NonNull byte[], @NonNull java.security.PrivateKey, @Nullable byte[]);
    method public void setupBaseSender(@NonNull java.security.PublicKey, @Nullable byte[]);
  }

  public final class HpkeResult {
    method public byte[] getEnc();
    method public byte[] getOutput();
  }

  public final class HpkeSuite {
    field public static final android.security.crypto.HpkeSuite DHKEM_X25519_HKDF_SHA256_HKDF_SHA256_AES_128_GCM;
    field public static final android.security.crypto.HpkeSuite DHKEM_X25519_HKDF_SHA256_HKDF_SHA256_AES_256_GCM;
    field public static final android.security.crypto.HpkeSuite DHKEM_X25519_HKDF_SHA256_HKDF_SHA256_CHACHA20POLY1305;
  }

}

