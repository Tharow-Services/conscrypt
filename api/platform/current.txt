// Signature format: 2.0
package android.net.ssl {

  public class SSLEngines {
    method @Nullable public static byte[] exportKeyingMaterial(@NonNull javax.net.ssl.SSLEngine, @NonNull String, @Nullable byte[], int) throws javax.net.ssl.SSLException;
    method public static boolean isSupportedEngine(@NonNull javax.net.ssl.SSLEngine);
    method public static void setUseSessionTickets(@NonNull javax.net.ssl.SSLEngine, boolean);
  }

  public class SSLSockets {
    method @Nullable public static byte[] exportKeyingMaterial(@NonNull javax.net.ssl.SSLSocket, @NonNull String, @Nullable byte[], int) throws javax.net.ssl.SSLException;
    method public static boolean isSupportedSocket(@NonNull javax.net.ssl.SSLSocket);
    method public static void setUseSessionTickets(@NonNull javax.net.ssl.SSLSocket, boolean);
  }

  @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public class SpakeClientKeyManagerParameters implements javax.net.ssl.ManagerFactoryParameters {
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public byte[] getClientPassword();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public byte[] getPakeContext();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeIdentity getSpakeIdentity();
  }

  @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public static class SpakeClientKeyManagerParameters.Builder {
    ctor @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public SpakeClientKeyManagerParameters.Builder();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeClientKeyManagerParameters build();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeClientKeyManagerParameters.Builder setClientPassword(@NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeClientKeyManagerParameters.Builder setIdentity(@NonNull byte[], @NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeClientKeyManagerParameters.Builder setIdentity(@NonNull android.net.ssl.SpakeIdentity);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeClientKeyManagerParameters.Builder setPakeContext(@NonNull byte[]);
  }

  @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public class SpakeIdentity {
    ctor @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public SpakeIdentity(@NonNull byte[], @NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public byte[] getClientIdentity();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public byte[] getServerIdentity();
  }

  @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public class SpakeServerKeyManagerParameters implements javax.net.ssl.ManagerFactoryParameters {
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public byte[] getPakeContext();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @Nullable public byte[] getPassword(@NonNull byte[], @NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @Nullable public byte[] getPassword(@NonNull android.net.ssl.SpakeIdentity);
  }

  @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public static class SpakeServerKeyManagerParameters.Builder {
    ctor @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) public SpakeServerKeyManagerParameters.Builder();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeServerKeyManagerParameters.Builder addPasswordMapping(@NonNull byte[], @NonNull byte[], @NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeServerKeyManagerParameters.Builder addPasswordMapping(@NonNull android.net.ssl.SpakeIdentity, @NonNull byte[]);
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeServerKeyManagerParameters build();
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags.FLAG_SPAKE2PLUS_API) @NonNull public android.net.ssl.SpakeServerKeyManagerParameters.Builder setPakeContext(@NonNull byte[]);
  }

}

package com.android.org.conscrypt {

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public interface CertPinManager {
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final class ClientSessionContext implements javax.net.ssl.SSLSessionContext {
    method public final java.util.Enumeration<byte[]> getIds();
    method public final javax.net.ssl.SSLSession getSession(byte[]);
    method public final int getSessionCacheSize();
    method public final int getSessionTimeout();
    method @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void setPersistentCache(com.android.org.conscrypt.SSLClientSessionCache);
    method public final void setSessionCacheSize(int) throws java.lang.IllegalArgumentException;
    method public final void setSessionTimeout(int) throws java.lang.IllegalArgumentException;
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final class Conscrypt {
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public static javax.net.ssl.X509TrustManager getDefaultX509TrustManager() throws java.security.KeyManagementException;
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public interface ConscryptCertStore {
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final class FileClientSessionCache {
    method @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public static com.android.org.conscrypt.SSLClientSessionCache usingDirectory(java.io.File) throws java.io.IOException;
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) @libcore.api.IntraCoreApi public final class OpenSSLProvider extends java.security.Provider {
    ctor @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) @libcore.api.IntraCoreApi public OpenSSLProvider();
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public abstract class OpenSSLSocketImpl extends javax.net.ssl.SSLSocket {
    method public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
    method public final void connect(java.net.SocketAddress) throws java.io.IOException;
    method public final void connect(java.net.SocketAddress, int) throws java.io.IOException;
    method @Deprecated @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=dalvik.annotation.compat.VersionCodes.Q, publicAlternatives="Use {@code javax.net.ssl.SSLSocket#getApplicationProtocol()}.") @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final byte[] getAlpnSelectedProtocol();
    method public abstract javax.net.ssl.SSLSession getHandshakeSession();
    method @Deprecated @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final byte[] getNpnSelectedProtocol();
    method public final int getPort();
    method public final int getSoTimeout() throws java.net.SocketException;
    method public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
    method public final void sendUrgentData(int) throws java.io.IOException;
    method @Deprecated @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=dalvik.annotation.compat.VersionCodes.Q, publicAlternatives="Use {@code " + "javax.net.ssl.SSLParameters#setApplicationProtocols(java.lang.String[])}.") public final void setAlpnProtocols(String[]);
    method @Deprecated @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=dalvik.annotation.compat.VersionCodes.Q, publicAlternatives="Use {@code " + "javax.net.ssl.SSLParameters#setApplicationProtocols(java.lang.String[])}.") @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final void setAlpnProtocols(byte[]);
    method @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=30, trackingBug=170729553) @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public abstract void setChannelIdPrivateKey(java.security.PrivateKey);
    method @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=30, trackingBug=170729553) @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void setHandshakeTimeout(int) throws java.net.SocketException;
    method @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=dalvik.annotation.compat.VersionCodes.Q, publicAlternatives="Use {@code javax.net.ssl.SSLParameters#setServerNames}.") @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void setHostname(String);
    method @Deprecated @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final void setNpnProtocols(byte[]);
    method public final void setOOBInline(boolean) throws java.net.SocketException;
    method public final void setSoTimeout(int) throws java.net.SocketException;
    method @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=30, trackingBug=170729553) @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void setSoWriteTimeout(int) throws java.net.SocketException;
    method @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk=dalvik.annotation.compat.VersionCodes.Q, publicAlternatives="Use {@link android.net.ssl.SSLSockets#setUseSessionTickets}.") @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public abstract void setUseSessionTickets(boolean);
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public interface SSLClientSessionCache {
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final class TrustManagerImpl extends javax.net.ssl.X509ExtendedTrustManager {
    ctor @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public TrustManagerImpl(java.security.KeyStore);
    ctor @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public TrustManagerImpl(java.security.KeyStore, com.android.org.conscrypt.CertPinManager, com.android.org.conscrypt.ConscryptCertStore);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void checkClientTrusted(java.security.cert.X509Certificate[], String) throws java.security.cert.CertificateException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void checkClientTrusted(java.security.cert.X509Certificate[], String, java.net.Socket) throws java.security.cert.CertificateException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void checkClientTrusted(java.security.cert.X509Certificate[], String, javax.net.ssl.SSLEngine) throws java.security.cert.CertificateException;
    method public void checkServerTrusted(java.security.cert.X509Certificate[], String) throws java.security.cert.CertificateException;
    method @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.List<java.security.cert.X509Certificate> checkServerTrusted(java.security.cert.X509Certificate[], String, String) throws java.security.cert.CertificateException;
    method @FlaggedApi(com.android.org.conscrypt.flags.Flags
                                           .FLAG_CERTIFICATE_TRANSPARENCY_CHECKSERVERTRUSTED_API) @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.List<java.security.cert.X509Certificate> checkServerTrusted(java.security.cert.X509Certificate[], byte[], byte[], String, String) throws java.security.cert.CertificateException;
    method public void checkServerTrusted(java.security.cert.X509Certificate[], String, java.net.Socket) throws java.security.cert.CertificateException;
    method public void checkServerTrusted(java.security.cert.X509Certificate[], String, javax.net.ssl.SSLEngine) throws java.security.cert.CertificateException;
    method public java.security.cert.X509Certificate[] getAcceptedIssuers();
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.List<java.security.cert.X509Certificate> getTrustedChainForServer(java.security.cert.X509Certificate[], String, java.net.Socket) throws java.security.cert.CertificateException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.List<java.security.cert.X509Certificate> getTrustedChainForServer(java.security.cert.X509Certificate[], String, javax.net.ssl.SSLEngine) throws java.security.cert.CertificateException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void handleTrustStorageUpdate();
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public final class TrustedCertificateIndex {
    ctor @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public TrustedCertificateIndex();
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Set<java.security.cert.TrustAnchor> findAllByIssuerAndSignature(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.TrustAnchor findByIssuerAndSignature(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.TrustAnchor findBySubjectAndPublicKey(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.TrustAnchor index(java.security.cert.X509Certificate);
  }

  @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public class TrustedCertificateStore implements com.android.org.conscrypt.ConscryptCertStore {
    ctor @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public TrustedCertificateStore();
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Set<java.lang.String> aliases();
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Set<java.lang.String> allSystemAliases();
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public boolean containsAlias(String);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void deleteCertificateEntry(String) throws java.security.cert.CertificateException, java.io.IOException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Set<java.security.cert.X509Certificate> findAllIssuers(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.X509Certificate findIssuer(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.Certificate getCertificate(String);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.Certificate getCertificate(String, boolean);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public String getCertificateAlias(java.security.cert.Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public String getCertificateAlias(java.security.cert.Certificate, boolean);
    method @android.compat.annotation.UnsupportedAppUsage @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.List<java.security.cert.X509Certificate> getCertificateChain(java.security.cert.X509Certificate) throws java.security.cert.CertificateException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.io.File getCertificateFile(java.io.File, java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Date getCreationDate(String);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.security.cert.X509Certificate getTrustAnchor(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public void installCertificate(java.security.cert.X509Certificate) throws java.security.cert.CertificateException, java.io.IOException;
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public static final boolean isUser(String);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public boolean isUserAddedCertificate(java.security.cert.X509Certificate);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public static void setDefaultUserDirectory(java.io.File);
    method @libcore.api.CorePlatformApi(status=libcore.api.CorePlatformApi.Status.STABLE) public java.util.Set<java.lang.String> userAliases();
  }

}

